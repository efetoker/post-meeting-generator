// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum MeetingStatus {
  SCHEDULED
  PROCESSING
  TRANSCRIBING
  COMPLETED
  FAILED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  refresh_token_expires_in Int?
  email         String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  botJoinOffsetMinutes Int @default(5)
  defaultFacebookPageId    String?
  facebookPageAccessToken String? @db.Text

  accounts      Account[]
  sessions      Session[]
  meetings      Meeting[]
  automations   Automation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Meeting {
  id              String @id @default(cuid())
  userId          String
  user            User   @relation(fields: [userId], references: [id])
  googleEventId   String @unique
  title           String
  startTime       DateTime
  meetingLink     String
  platform        String // "zoom", "google_meet", etc.

  attendees        Json?
  recordingEnabled Boolean @default(false)

  status          MeetingStatus @default(SCHEDULED) // e.g., SCHEDULED, TRANSCRIBING, COMPLETED, FAILED

  recallBotId     String?
  transcript      String? @db.Text
  followUpEmail   String? @db.Text
  socialPosts     SocialPost[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Automation {
  id          String @id @default(cuid())
  name        String
  platform    String // e.g., "linkedin", "facebook"
  prompt      String @db.Text
  example     String? @db.Text

  userId      String
  user        User   @relation(fields: [userId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SocialPost {
  id        String @id @default(cuid())
  platform  String // e.g., "LinkedIn", "Facebook"
  content   String @db.Text
  status    String @default("DRAFT") // DRAFT or PUBLISHED

  meetingId String
  meeting   Meeting @relation(fields: [meetingId], references: [id])

  createdAt DateTime @default(now())
}

model CronLog {
  id        String   @id @default(cuid())
  message   String
  createdAt DateTime @default(now())
}